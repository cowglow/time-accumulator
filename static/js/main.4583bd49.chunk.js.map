{"version":3,"sources":["contexts/AppStateContext.tsx","components/ClockDisplay.tsx","hooks/useTimer.ts","lib/format-timestamp/format-timestamp.ts","components/LogDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultValues","log","timestamp","actionToggle","Error","AppStateContext","React","createContext","AppStateProvider","children","defaultValue","useState","timeLog","setTimeLog","checkin","setCheckin","Provider","value","moment","unix","timeIn","timeOut","toString","useAppState","useContext","ClockDisplay","reset","set","hour","minute","second","millisecond","clock","timer","setTimer","useEffect","timeout","setTimeout","duration","diff","parseInt","clearTimeout","hours","minutes","seconds","milliseconds","Math","floor","useTimer","padStart","formatLog","start","end","mStart","Date","mEnd","abs","getTime","LogDisplay","map","entry","key","App","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4583bd49.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\n\ntype LogType = {\n  timeIn: string;\n  timeOut: string;\n};\n\n/** Context */\nexport interface AppStateContextProps {\n  log: LogType[];\n  timestamp: null | string;\n  actionToggle: () => void;\n}\n\nconst defaultValues: AppStateContextProps = {\n  log: [],\n  timestamp: null,\n  actionToggle: () => {\n    throw Error('Error: Uninitialized context');\n  },\n};\n\nconst AppStateContext =\n  React.createContext<AppStateContextProps>(defaultValues);\n\n/** Provider */\ninterface AppStateProviderProps {\n  children: React.ReactNode;\n  defaultValue?: AppStateContextProps;\n}\n\nexport const AppStateProvider: React.FC<AppStateProviderProps> = ({\n  children,\n  defaultValue,\n}) => {\n  const [timeLog, setTimeLog] = useState<LogType[]>([]);\n  const [checkin, setCheckin] = useState<string | null>(\n    defaultValue ? defaultValue.timestamp : null\n  );\n\n  const toggle = () => {\n    const timestamp = moment().unix();\n    if (!checkin) {\n      setCheckin(timestamp.toString());\n    } else {\n      setTimeLog([\n        ...timeLog,\n        {\n          timeIn: checkin,\n          timeOut: timestamp.toString(),\n        },\n      ]);\n      setCheckin(null);\n    }\n  };\n\n  return (\n    <AppStateContext.Provider\n      value={{ actionToggle: toggle, log: timeLog, timestamp: checkin }}\n    >\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n\n/** Hook */\nexport const useAppState = () => {\n  return React.useContext(AppStateContext);\n};\n","import React from \"react\";\nimport { useTimer } from \"../hooks/useTimer\";\n\ninterface ClockDisplayProps {}\n\nexport const ClockDisplay: React.FunctionComponent<ClockDisplayProps> = () => {\n  const { hour, minute, seconds, milliseconds } = useTimer();\n\n  return (\n    <h1>\n      <span>{hour.toString().padStart(2, \"0\")}</span>:\n      <span>{minute.toString().padStart(2, \"0\")}</span>:\n      <span>{seconds.toString().padStart(2, \"0\")}</span>:\n      <small>{milliseconds.toString().padStart(2, \"0\")}</small>\n    </h1>\n  );\n};\n","import moment, { Duration, Moment } from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { useAppState } from \"../contexts/AppStateContext\";\n\nexport const useTimer = () => {\n  const { timestamp } = useAppState();\n\n  const reset = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n  const [clock] = useState<Moment | Duration>(reset);\n\n  const [timer, setTimer] = useState(clock);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (timestamp) {\n        setTimer(\n          moment.duration(moment().diff(moment.unix(parseInt(timestamp))))\n        );\n      } else {\n        setTimer(reset);\n      }\n    }, 100);\n    return () => {\n      clearTimeout(timeout);\n    };\n  });\n\n  return {\n    hour: timer.hours(),\n    minute: timer.minutes(),\n    seconds: timer.seconds(),\n    milliseconds: Math.floor(timer.milliseconds() * 0.1),\n  };\n};\n","export function formatTimestamp(s: any): FormatTimeOutput {\n  return new Date(s * 1e3).toISOString();\n}\n\nexport function formatLog(start: number, end: number) {\n  const mStart = new Date(start * 1000);\n  const mEnd = new Date(end * 1000);\n\n  const diff = Math.abs(mEnd.getTime() - mStart.getTime());\n\n  const hours = Math.floor(diff / 1000 / 60 / 60);\n  const minutes = Math.floor(diff / 1000 / 60);\n  const seconds = Math.floor(diff / 1000);\n\n  return (\n    hours.toString().padStart(2, '0') +\n    ':' +\n    minutes.toString().padStart(2, '0') +\n    ':' +\n    seconds.toString().padStart(2, '0')\n  );\n}\n","import React from 'react';\nimport { useAppState } from '../contexts/AppStateContext';\nimport { formatLog } from '../lib/format-timestamp/format-timestamp';\n\ninterface LogDisplayProps {}\n\nexport const LogDisplay: React.FC<LogDisplayProps> = () => {\n  const { log } = useAppState();\n  return (\n    <ol>\n      {log.map((entry, key) => {\n        return (\n          <li key={key}>\n            {formatLog(parseInt(entry.timeIn), parseInt(entry.timeOut))}\n          </li>\n        );\n      })}\n    </ol>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { ClockDisplay } from \"./components/ClockDisplay\";\nimport { LogDisplay } from \"./components/LogDisplay\";\nimport { useAppState } from \"./contexts/AppStateContext\";\n\nexport const App = () => {\n  const { actionToggle, timestamp } = useAppState();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">time-accumulator </header>\n      <main className=\"App-main\">\n        <ClockDisplay />\n        <LogDisplay />\n      </main>\n      <button onClick={actionToggle}>{!timestamp ? \"Start\" : \"Stop\"}</button>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppStateProvider } from \"./contexts/AppStateContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppStateProvider>\n      <App />\n    </AppStateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}